"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_readdir_recursive_1 = __importDefault(require("fs-readdir-recursive"));
const swc = __importStar(require("swc"));
const includes_1 = __importDefault(require("lodash/includes"));
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
function chmod(src, dest) {
    fs_1.default.chmodSync(dest, fs_1.default.statSync(src).mode);
}
exports.chmod = chmod;
function readdir(dirname, includeDotfiles, filter) {
    // @ts-ignore
    return fs_readdir_recursive_1.default(dirname, (filename, _index, currentDirectory) => {
        const stat = fs_1.default.statSync(path_1.default.join(currentDirectory, filename));
        if (stat.isDirectory())
            return true;
        return ((includeDotfiles || filename[0] !== ".") && (!filter || filter(filename)));
    });
}
exports.readdir = readdir;
function readdirForCompilable(dirname, includeDotfiles, altExts) {
    return readdir(dirname, includeDotfiles, function (filename) {
        return isCompilableExtension(filename, altExts);
    });
}
exports.readdirForCompilable = readdirForCompilable;
/**
 * Test if a filename ends with a compilable extension.
 */
function isCompilableExtension(filename, altExts) {
    const exts = altExts || [".js", ".jsx", ".es6", ".es", ".mjs", ".ts"];
    const ext = path_1.default.extname(filename);
    return includes_1.default(exts, ext);
}
exports.isCompilableExtension = isCompilableExtension;
function addSourceMappingUrl(code, loc) {
    return code + "\n//# sourceMappingURL=" + path_1.default.basename(loc);
}
exports.addSourceMappingUrl = addSourceMappingUrl;
function transform(filename, code, opts) {
    opts = Object.assign({ filename }, opts);
    return swc.transform(code, opts);
}
exports.transform = transform;
function compile(filename, opts) {
    opts = Object.assign({}, opts);
    return swc.transformFile(filename, opts);
}
exports.compile = compile;
function deleteDir(path) {
    if (fs_1.default.existsSync(path)) {
        fs_1.default.readdirSync(path).forEach(function (file) {
            const curPath = path + "/" + file;
            if (fs_1.default.lstatSync(curPath).isDirectory()) {
                // recurse
                deleteDir(curPath);
            }
            else {
                // delete file
                fs_1.default.unlinkSync(curPath);
            }
        });
        fs_1.default.rmdirSync(path);
    }
}
exports.deleteDir = deleteDir;
process.on("uncaughtException", function (err) {
    console.error(err);
    process.exit(1);
});
function requireChokidar() {
    try {
        return require("chokidar");
    }
    catch (err) {
        console.error("The optional dependency chokidar failed to install and is required for " +
            "--watch. Chokidar is likely not supported on your platform.");
        throw err;
    }
}
exports.requireChokidar = requireChokidar;
function adjustRelative(relative, keepFileExtension) {
    if (keepFileExtension) {
        return relative;
    }
    return relative.replace(/\.(\w*?)$/, "") + ".js";
}
exports.adjustRelative = adjustRelative;
