import { __awaiter, __generator, __values } from "tslib";
import { ProviderError } from "@aws-sdk/property-provider";
import { loadSharedConfigFiles, } from "@aws-sdk/shared-ini-file-loader";
var DEFAULT_PROFILE = "default";
export var ENV_PROFILE = "AWS_PROFILE";
export var fromSharedConfigFiles = function (init) {
    if (init === void 0) { init = {}; }
    return function () { return __awaiter(void 0, void 0, void 0, function () {
        var _a, loadedConfig, _b, profile, _c, configFile, credentialsFile, _d, _e, file, region;
        var e_1, _f;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    _a = init.loadedConfig, loadedConfig = _a === void 0 ? loadSharedConfigFiles(init) : _a, _b = init.profile, profile = _b === void 0 ? process.env[ENV_PROFILE] || DEFAULT_PROFILE : _b;
                    return [4 /*yield*/, loadedConfig];
                case 1:
                    _c = _g.sent(), configFile = _c.configFile, credentialsFile = _c.credentialsFile;
                    try {
                        for (_d = __values([credentialsFile, configFile]), _e = _d.next(); !_e.done; _e = _d.next()) {
                            file = _e.value;
                            region = (file[profile] || {}).region;
                            if (typeof region === "string") {
                                return [2 /*return*/, region];
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_e && !_e.done && (_f = _d.return)) _f.call(_d);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    throw new ProviderError("No region found for profile " + profile + " in SDK configuration files");
            }
        });
    }); };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJvbVNoYXJlZENvbmZpZ0ZpbGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Zyb21TaGFyZWRDb25maWdGaWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzNELE9BQU8sRUFDTCxxQkFBcUIsR0FHdEIsTUFBTSxpQ0FBaUMsQ0FBQztBQUd6QyxJQUFNLGVBQWUsR0FBRyxTQUFTLENBQUM7QUFDbEMsTUFBTSxDQUFDLElBQU0sV0FBVyxHQUFHLGFBQWEsQ0FBQztBQWV6QyxNQUFNLENBQUMsSUFBTSxxQkFBcUIsR0FBRyxVQUFDLElBQTJCO0lBQTNCLHFCQUFBLEVBQUEsU0FBMkI7SUFBdUIsT0FBQTs7Ozs7O29CQUM5RSxLQUFzRyxJQUFJLGFBQWhFLEVBQTFDLFlBQVksbUJBQUcscUJBQXFCLENBQUMsSUFBSSxDQUFDLEtBQUEsRUFBRSxLQUEwRCxJQUFJLFFBQVQsRUFBckQsT0FBTyxtQkFBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLGVBQWUsS0FBQSxDQUFVO29CQUUzRSxxQkFBTSxZQUFZLEVBQUE7O29CQUFwRCxLQUFrQyxTQUFrQixFQUFsRCxVQUFVLGdCQUFBLEVBQUUsZUFBZSxxQkFBQTs7d0JBQ25DLEtBQW1CLEtBQUEsU0FBQSxDQUFDLGVBQWUsRUFBRSxVQUFVLENBQUMsQ0FBQSw0Q0FBRTs0QkFBdkMsSUFBSTs0QkFDTCxNQUFNLEdBQUssQ0FBQSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQVMsRUFBRSxDQUFBLE9BQTdCLENBQThCOzRCQUM1QyxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsRUFBRTtnQ0FDOUIsc0JBQU8sTUFBTSxFQUFDOzZCQUNmO3lCQUNGOzs7Ozs7Ozs7b0JBRUQsTUFBTSxJQUFJLGFBQWEsQ0FBQyxpQ0FBK0IsT0FBTyxnQ0FBNkIsQ0FBQyxDQUFDOzs7U0FDOUY7QUFadUYsQ0FZdkYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByb3ZpZGVyRXJyb3IgfSBmcm9tIFwiQGF3cy1zZGsvcHJvcGVydHktcHJvdmlkZXJcIjtcbmltcG9ydCB7XG4gIGxvYWRTaGFyZWRDb25maWdGaWxlcyxcbiAgU2hhcmVkQ29uZmlnRmlsZXMsXG4gIFNoYXJlZENvbmZpZ0luaXQgYXMgQmFzZVNoYXJlZENvbmZpZ0luaXQsXG59IGZyb20gXCJAYXdzLXNkay9zaGFyZWQtaW5pLWZpbGUtbG9hZGVyXCI7XG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuXG5jb25zdCBERUZBVUxUX1BST0ZJTEUgPSBcImRlZmF1bHRcIjtcbmV4cG9ydCBjb25zdCBFTlZfUFJPRklMRSA9IFwiQVdTX1BST0ZJTEVcIjtcblxuZXhwb3J0IGludGVyZmFjZSBTaGFyZWRDb25maWdJbml0IGV4dGVuZHMgQmFzZVNoYXJlZENvbmZpZ0luaXQge1xuICAvKipcbiAgICogVGhlIGNvbmZpZ3VyYXRpb24gcHJvZmlsZSB0byB1c2UuXG4gICAqL1xuICBwcm9maWxlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBIHByb21pc2UgdGhhdCB3aWxsIGJlIHJlc29sdmVkIHdpdGggbG9hZGVkIGFuZCBwYXJzZWQgY3JlZGVudGlhbHMgZmlsZXMuXG4gICAqIFVzZWQgdG8gYXZvaWQgbG9hZGluZyBzaGFyZWQgY29uZmlnIGZpbGVzIG11bHRpcGxlIHRpbWVzLlxuICAgKi9cbiAgbG9hZGVkQ29uZmlnPzogUHJvbWlzZTxTaGFyZWRDb25maWdGaWxlcz47XG59XG5cbmV4cG9ydCBjb25zdCBmcm9tU2hhcmVkQ29uZmlnRmlsZXMgPSAoaW5pdDogU2hhcmVkQ29uZmlnSW5pdCA9IHt9KTogUHJvdmlkZXI8c3RyaW5nPiA9PiBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHsgbG9hZGVkQ29uZmlnID0gbG9hZFNoYXJlZENvbmZpZ0ZpbGVzKGluaXQpLCBwcm9maWxlID0gcHJvY2Vzcy5lbnZbRU5WX1BST0ZJTEVdIHx8IERFRkFVTFRfUFJPRklMRSB9ID0gaW5pdDtcblxuICBjb25zdCB7IGNvbmZpZ0ZpbGUsIGNyZWRlbnRpYWxzRmlsZSB9ID0gYXdhaXQgbG9hZGVkQ29uZmlnO1xuICBmb3IgKGNvbnN0IGZpbGUgb2YgW2NyZWRlbnRpYWxzRmlsZSwgY29uZmlnRmlsZV0pIHtcbiAgICBjb25zdCB7IHJlZ2lvbiB9ID0gZmlsZVtwcm9maWxlXSB8fCA8YW55Pnt9O1xuICAgIGlmICh0eXBlb2YgcmVnaW9uID09PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXR1cm4gcmVnaW9uO1xuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBQcm92aWRlckVycm9yKGBObyByZWdpb24gZm91bmQgZm9yIHByb2ZpbGUgJHtwcm9maWxlfSBpbiBTREsgY29uZmlndXJhdGlvbiBmaWxlc2ApO1xufTtcbiJdfQ==