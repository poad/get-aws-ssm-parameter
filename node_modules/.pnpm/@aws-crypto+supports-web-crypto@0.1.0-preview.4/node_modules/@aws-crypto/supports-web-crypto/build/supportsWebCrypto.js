"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var subtleCryptoMethods = [
    'decrypt',
    'digest',
    'encrypt',
    'exportKey',
    'generateKey',
    'importKey',
    'sign',
    'verify',
];
function supportsWebCrypto(window) {
    if (supportsSecureRandom(window) &&
        typeof window.crypto.subtle === 'object') {
        var subtle = window.crypto.subtle;
        return supportsSubtleCrypto(subtle);
    }
    return false;
}
exports.supportsWebCrypto = supportsWebCrypto;
function supportsSecureRandom(window) {
    if (typeof window === 'object' &&
        typeof window.crypto === 'object') {
        var getRandomValues = window.crypto.getRandomValues;
        return typeof getRandomValues === 'function';
    }
    return false;
}
exports.supportsSecureRandom = supportsSecureRandom;
function supportsSubtleCrypto(subtle) {
    return subtle && subtleCryptoMethods
        .every(function (methodName) { return typeof subtle[methodName] === 'function'; });
}
exports.supportsSubtleCrypto = supportsSubtleCrypto;
function supportsZeroByteGCM(subtle) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var key, zeroByteAuthTag, _a;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!supportsSubtleCrypto(subtle))
                        return [2 /*return*/, false];
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 4, , 5]);
                    return [4 /*yield*/, subtle.generateKey({ name: "AES-GCM", length: 128 }, false, ["encrypt"])];
                case 2:
                    key = _b.sent();
                    return [4 /*yield*/, subtle.encrypt({
                            name: "AES-GCM",
                            iv: new Uint8Array(Array(12)),
                            additionalData: new Uint8Array(Array(16)),
                            tagLength: 128
                        }, key, new Uint8Array(0))];
                case 3:
                    zeroByteAuthTag = _b.sent();
                    return [2 /*return*/, zeroByteAuthTag.byteLength === 16];
                case 4:
                    _a = _b.sent();
                    return [2 /*return*/, false];
                case 5: return [2 /*return*/];
            }
        });
    });
}
exports.supportsZeroByteGCM = supportsZeroByteGCM;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VwcG9ydHNXZWJDcnlwdG8uanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJzdXBwb3J0c1dlYkNyeXB0by50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSxJQUFNLG1CQUFtQixHQUE4QjtJQUNyRCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsYUFBYTtJQUNiLFdBQVc7SUFDWCxNQUFNO0lBQ04sUUFBUTtDQUNULENBQUM7QUFFRixTQUFnQixpQkFBaUIsQ0FBQyxNQUFjO0lBQzlDLElBQ0Usb0JBQW9CLENBQUMsTUFBTSxDQUFDO1FBQzVCLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEtBQUssUUFBUSxFQUN4QztRQUNPLElBQUEsNkJBQU0sQ0FBa0I7UUFFL0IsT0FBTyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQTtLQUNwQztJQUVELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQVhELDhDQVdDO0FBRUQsU0FBZ0Isb0JBQW9CLENBQUMsTUFBYztJQUNqRCxJQUNFLE9BQU8sTUFBTSxLQUFLLFFBQVE7UUFDMUIsT0FBTyxNQUFNLENBQUMsTUFBTSxLQUFLLFFBQVEsRUFDakM7UUFDTyxJQUFBLCtDQUFlLENBQWtCO1FBRXhDLE9BQU8sT0FBTyxlQUFlLEtBQUssVUFBVSxDQUFBO0tBQzdDO0lBRUQsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBWEQsb0RBV0M7QUFFRCxTQUFnQixvQkFBb0IsQ0FBQyxNQUFvQjtJQUN2RCxPQUFPLE1BQU0sSUFBSSxtQkFBbUI7U0FDakMsS0FBSyxDQUFDLFVBQUEsVUFBVSxJQUFJLE9BQUEsT0FBTyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssVUFBVSxFQUF4QyxDQUF3QyxDQUFDLENBQUE7QUFDbEUsQ0FBQztBQUhELG9EQUdDO0FBRUQsU0FBc0IsbUJBQW1CLENBQUMsTUFBb0I7Ozs7OztvQkFDNUQsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQzt3QkFBRSxzQkFBTyxLQUFLLEVBQUE7Ozs7b0JBRWpDLHFCQUFNLE1BQU0sQ0FBQyxXQUFXLENBQ2xDLEVBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFDLEVBQzlCLEtBQUssRUFDTCxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUE7O29CQUhSLEdBQUcsR0FBRyxTQUdFO29CQUNVLHFCQUFNLE1BQU0sQ0FBQyxPQUFPLENBQUM7NEJBQ3pDLElBQUksRUFBRSxTQUFTOzRCQUNmLEVBQUUsRUFBRSxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7NEJBQzdCLGNBQWMsRUFBRSxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7NEJBQ3pDLFNBQVMsRUFBRSxHQUFHO3lCQUNmLEVBQ0QsR0FBRyxFQUNILElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUE7O29CQVBkLGVBQWUsR0FBRyxTQU9KO29CQUNwQixzQkFBTyxlQUFlLENBQUMsVUFBVSxLQUFLLEVBQUUsRUFBQTs7O29CQUV4QyxzQkFBTyxLQUFLLEVBQUE7Ozs7O0NBRWY7QUFuQkQsa0RBbUJDIiwic291cmNlc0NvbnRlbnQiOlsidHlwZSBTdWJ0bGVDcnlwdG9NZXRob2QgPSAnZGVjcnlwdCd8J2RpZ2VzdCd8J2VuY3J5cHQnfCdleHBvcnRLZXknfCdnZW5lcmF0ZUtleSd8J2ltcG9ydEtleSd8J3NpZ24nfCd2ZXJpZnknO1xuXG5jb25zdCBzdWJ0bGVDcnlwdG9NZXRob2RzOiBBcnJheTxTdWJ0bGVDcnlwdG9NZXRob2Q+ID0gW1xuICAnZGVjcnlwdCcsXG4gICdkaWdlc3QnLFxuICAnZW5jcnlwdCcsXG4gICdleHBvcnRLZXknLFxuICAnZ2VuZXJhdGVLZXknLFxuICAnaW1wb3J0S2V5JyxcbiAgJ3NpZ24nLFxuICAndmVyaWZ5Jyxcbl07XG5cbmV4cG9ydCBmdW5jdGlvbiBzdXBwb3J0c1dlYkNyeXB0byh3aW5kb3c6IFdpbmRvdyk6IGJvb2xlYW4ge1xuICBpZiAoXG4gICAgc3VwcG9ydHNTZWN1cmVSYW5kb20od2luZG93KSAmJlxuICAgIHR5cGVvZiB3aW5kb3cuY3J5cHRvLnN1YnRsZSA9PT0gJ29iamVjdCdcbiAgKSB7XG4gICAgY29uc3Qge3N1YnRsZX0gPSB3aW5kb3cuY3J5cHRvO1xuXG4gICAgcmV0dXJuIHN1cHBvcnRzU3VidGxlQ3J5cHRvKHN1YnRsZSlcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN1cHBvcnRzU2VjdXJlUmFuZG9tKHdpbmRvdzogV2luZG93KTogYm9vbGVhbiB7XG4gIGlmIChcbiAgICB0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyAmJlxuICAgIHR5cGVvZiB3aW5kb3cuY3J5cHRvID09PSAnb2JqZWN0J1xuICApIHtcbiAgICBjb25zdCB7Z2V0UmFuZG9tVmFsdWVzfSA9IHdpbmRvdy5jcnlwdG87XG5cbiAgICByZXR1cm4gdHlwZW9mIGdldFJhbmRvbVZhbHVlcyA9PT0gJ2Z1bmN0aW9uJ1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydHNTdWJ0bGVDcnlwdG8oc3VidGxlOiBTdWJ0bGVDcnlwdG8pIHtcbiAgcmV0dXJuIHN1YnRsZSAmJiBzdWJ0bGVDcnlwdG9NZXRob2RzXG4gICAgLmV2ZXJ5KG1ldGhvZE5hbWUgPT4gdHlwZW9mIHN1YnRsZVttZXRob2ROYW1lXSA9PT0gJ2Z1bmN0aW9uJylcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN1cHBvcnRzWmVyb0J5dGVHQ00oc3VidGxlOiBTdWJ0bGVDcnlwdG8pIHtcbiAgaWYgKCFzdXBwb3J0c1N1YnRsZUNyeXB0byhzdWJ0bGUpKSByZXR1cm4gZmFsc2VcbiAgdHJ5IHtcbiAgICBjb25zdCBrZXkgPSBhd2FpdCBzdWJ0bGUuZ2VuZXJhdGVLZXkoXG4gICAgICB7bmFtZTogXCJBRVMtR0NNXCIsIGxlbmd0aDogMTI4fSxcbiAgICAgIGZhbHNlLFxuICAgICAgW1wiZW5jcnlwdFwiXSlcbiAgICBjb25zdCB6ZXJvQnl0ZUF1dGhUYWcgPSBhd2FpdCBzdWJ0bGUuZW5jcnlwdCh7XG4gICAgICAgIG5hbWU6IFwiQUVTLUdDTVwiLFxuICAgICAgICBpdjogbmV3IFVpbnQ4QXJyYXkoQXJyYXkoMTIpKSxcbiAgICAgICAgYWRkaXRpb25hbERhdGE6IG5ldyBVaW50OEFycmF5KEFycmF5KDE2KSksXG4gICAgICAgIHRhZ0xlbmd0aDogMTI4XG4gICAgICB9LFxuICAgICAga2V5LFxuICAgICAgbmV3IFVpbnQ4QXJyYXkoMCkpXG4gICAgcmV0dXJuIHplcm9CeXRlQXV0aFRhZy5ieXRlTGVuZ3RoID09PSAxNlxuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufSJdfQ==